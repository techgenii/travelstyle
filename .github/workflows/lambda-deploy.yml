name: Deploy TravelStyle to Lambda

on:
  push:
    branches: [main]
    paths: ['backend/**', '.github/workflows/**']
  workflow_dispatch:
  workflow_run:
    workflows: ["Backend Quality CI/CD"]
    types: [completed]
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    env:
      ZIP_FILE: lambda-deploy.zip
      BUILD_DIR: build
      PYTHON_VERSION: 3.13
      HANDLER: app.main.handler
      RUNTIME: python3.13
      ARCHITECTURE: x86_64
      STAGE_NAME: '$default'
      FUNCTION_NAME: ${{ secrets.LAMBDA_FUNCTION_NAME }}
      ROLE_ARN: ${{ secrets.LAMBDA_ROLE_ARN }}
      REGION: ${{ secrets.AWS_REGION }}
      API_NAME: TravelStyleAPI
      LAMBDA_ENV_VARS: ${{ secrets.ENV_VARS || '{}' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.REGION }}

      - name: Build Lambda package
        run: |
          cd backend
          rm -rf $BUILD_DIR $ZIP_FILE
          mkdir -p $BUILD_DIR

          pip install -r requirements.txt --target $BUILD_DIR --no-cache-dir --upgrade
          cp -r app/* $BUILD_DIR/
          find $BUILD_DIR \( -name '__pycache__' -o -name '*.pyc' \) -exec rm -rf {} +

      - name: Package deployment
        run: |
          cd backend/$BUILD_DIR
          zip -r9 ../$ZIP_FILE .
          cd ..
          echo "size=$(du -h $ZIP_FILE | cut -f1)"

      - name: Upload Lambda package artifact
        uses: actions/upload-artifact@v4
        with:
          name: lambda-package
          path: backend/lambda-deploy.zip

      - name: Deploy Lambda Function
        run: |
          cd backend

          if [ "$ENV_VARS" != "{}" ]; then
            echo "{\"Variables\": $ENV_VARS}" > env.json
          else
            echo '{"Variables": {}}' > env.json
          fi

          if aws lambda get-function --function-name $FUNCTION_NAME &>/dev/null; then
            aws lambda wait function-active --function-name $FUNCTION_NAME
            aws lambda update-function-code --function-name $FUNCTION_NAME --zip-file fileb://$ZIP_FILE
            aws lambda wait function-updated --function-name $FUNCTION_NAME
            aws lambda update-function-configuration \
              --function-name $FUNCTION_NAME \
              --environment file://env.json \
              --timeout 30 \
              --memory-size 2048 \
              --ephemeral-storage '{"Size": 2048}'
            aws lambda wait function-updated --function-name $FUNCTION_NAME
          else
            aws lambda create-function \
              --function-name $FUNCTION_NAME \
              --runtime $RUNTIME \
              --role $ROLE_ARN \
              --handler $HANDLER \
              --architectures $ARCHITECTURE \
              --zip-file fileb://$ZIP_FILE \
              --environment file://env.json \
              --timeout 30 \
              --memory-size 2048 \
              --ephemeral-storage '{"Size": 2048}'
            aws lambda wait function-active --function-name $FUNCTION_NAME
          fi

      - name: Configure Lambda Logging Permissions
        run: |
          ROLE_NAME=$(aws lambda get-function --function-name $FUNCTION_NAME --query 'Configuration.Role' --output text | cut -d'/' -f2)
          aws iam attach-role-policy \
            --role-name $ROLE_NAME \
            --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole 2>/dev/null || echo "Policy already attached"

      - name: Configure API Gateway
        run: |
          API_ID=$(aws apigatewayv2 get-apis --query "Items[?Name=='$API_NAME'].ApiId" --output text | tr -d '\n')
          if [ -z "$API_ID" ] || [ "$API_ID" = "None" ]; then
            API_ID=$(aws apigatewayv2 create-api --name "$API_NAME" --protocol-type HTTP --query "ApiId" --output text)
          fi

          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          LAMBDA_ARN="arn:aws:lambda:$REGION:$ACCOUNT_ID:function:$FUNCTION_NAME"

          INTEGRATION_ID=$(aws apigatewayv2 get-integrations --api-id $API_ID --query "Items[0].IntegrationId" --output text 2>/dev/null || echo "")

          if [ -n "$INTEGRATION_ID" ]; then
            aws apigatewayv2 update-integration \
              --api-id $API_ID \
              --integration-id $INTEGRATION_ID \
              --integration-uri $LAMBDA_ARN \
              --payload-format-version 2.0
          else
            INTEGRATION_ID=$(aws apigatewayv2 create-integration \
              --api-id $API_ID \
              --integration-type AWS_PROXY \
              --integration-uri $LAMBDA_ARN \
              --payload-format-version 2.0 \
              --query 'IntegrationId' --output text)
          fi

          aws apigatewayv2 get-routes --api-id $API_ID --query "Items[?RouteKey=='ANY /'].RouteId" --output text | xargs -I {} aws apigatewayv2 delete-route --api-id $API_ID --route-id {} 2>/dev/null || true
          aws apigatewayv2 get-routes --api-id $API_ID --query "Items[?RouteKey=='ANY /{proxy+}'].RouteId" --output text | xargs -I {} aws apigatewayv2 delete-route --api-id $API_ID --route-id {} 2>/dev/null || true

          aws apigatewayv2 create-route --api-id $API_ID --route-key "ANY /" --target "integrations/$INTEGRATION_ID"
          aws apigatewayv2 create-route --api-id $API_ID --route-key "ANY /{proxy+}" --target "integrations/$INTEGRATION_ID"

          aws apigatewayv2 create-stage --api-id $API_ID --stage-name '$default' --auto-deploy 2>/dev/null || echo "Stage exists"

          aws lambda add-permission \
            --function-name $FUNCTION_NAME \
            --statement-id "api-gateway-invoke" \
            --action lambda:InvokeFunction \
            --principal apigateway.amazonaws.com \
            --source-arn "arn:aws:execute-api:$REGION:$ACCOUNT_ID:$API_ID/*/*/*" 2>/dev/null || echo "Permission exists"

          ENDPOINT="https://$API_ID.execute-api.$REGION.amazonaws.com"
          echo "API_ENDPOINT=$ENDPOINT" >> $GITHUB_ENV
          echo "✅ Deployed to: $ENDPOINT"

      - name: Post Deployment Test
        run: |
          sleep 10
          echo "Testing /health endpoint:"
          curl -s $API_ENDPOINT/health || echo "❌ Health check failed"
