# NOTE: This workflow expects all Lambda backend code (app.py, requirements.txt, etc.) to be in the 'backend' directory.
# If you move your backend code, update the workflow paths accordingly.
name: Deploy TravelStyle AI API to Lambda

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'
      - '.github/workflows/**'
  workflow_dispatch:
  workflow_run:
    workflows: ["Backend Quality CI/CD"]
    types: [completed]
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    env:
      ZIP_FILE: lambda-deploy.zip
      BUILD_DIR: build
      PYTHON_VERSION: 3.13
      HANDLER: travelstyle.handler
      RUNTIME: python3.13
      ARCHITECTURE: x86_64
      STAGE_NAME: '$default'  # Use default stage for root URL
      FUNCTION_NAME: ${{ secrets.LAMBDA_FUNCTION_NAME }}
      ROLE_ARN: ${{ secrets.LAMBDA_ROLE_ARN }}
      REGION: ${{ secrets.AWS_REGION }}
      S3_BUCKET: ${{ secrets.LAMBDA_S3_BUCKET }}
      API_NAME: TravelStyleAPI  # Distinct API name

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.REGION }}

      - name: Setup Lambda Execution Role
        run: |
          echo "Setting up Lambda execution role in region: $REGION"

          # Define role name
          ROLE_NAME="TravelStyle-Lambda-Role"
          ROLE_ARN="arn:aws:iam::$(aws sts get-caller-identity --query Account --output text):role/$ROLE_NAME"

          # Check if role exists
          if aws iam get-role --role-name $ROLE_NAME &>/dev/null; then
            echo "Using existing role: $ROLE_ARN"
          else
            echo "Creating new Lambda execution role..."

            # Create trust policy
            cat > trust-policy.json << EOF
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": "lambda.amazonaws.com"
                },
                "Action": "sts:AssumeRole"
              }
            ]
          }
          EOF

            # Create the role
            aws iam create-role \
              --role-name $ROLE_NAME \
              --assume-role-policy-document file://trust-policy.json \
              --description "Lambda execution role for TravelStyle"

            # Attach basic execution policy
            aws iam attach-role-policy \
              --role-name $ROLE_NAME \
              --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

            echo "Created role: $ROLE_ARN"
          fi

          # Update environment variable to use the correct role
          echo "ROLE_ARN=$ROLE_ARN" >> $GITHUB_ENV
          echo "Using role: $ROLE_ARN"

      - name: Build Lambda package
        run: |
          cd backend
          rm -rf $BUILD_DIR $ZIP_FILE
          mkdir -p $BUILD_DIR

          # Install all requirements natively (no --platform or --python-version)
          pip install -r requirements.txt --target $BUILD_DIR \
            --no-cache-dir \
            --upgrade

          echo "Copying: ./app/* to $BUILD_DIR/"
          cp -r ./app/* ./$BUILD_DIR/
          find $BUILD_DIR \( -name '__pycache__' -o -name '*.pyc' \) -exec rm -rf {} +

      - name: Package deployment
        run: |
          cd backend
          cd $BUILD_DIR
          zip -r9 ../$ZIP_FILE .
          cd ..
          echo "size=$(du -h $ZIP_FILE | cut -f1)" >> $GITHUB_OUTPUT

      - name: Upload Lambda package artifact
        uses: actions/upload-artifact@v4
        with:
          name: lambda-package
          path: backend/lambda-deploy.zip

      - name: Deploy Lambda Function
        run: |
          cd backend

          # Handle environment variables properly
          if [ -n "$ENV_VARS" ] && [ "$ENV_VARS" != "{}" ]; then
            # If ENV_VARS is provided, wrap it in Variables object
            echo "{\"Variables\": $ENV_VARS}" > env.json
            echo "Environment variables configured (count: $(echo "$ENV_VARS" | jq -r 'keys | length'))"
          else
            # Create empty environment variables
            echo '{"Variables": {}}' > env.json
            echo "No environment variables configured"
          fi

          # Debug: show what we're creating (without revealing values)
          echo "Environment configuration structure:"
          cat env.json | jq -r 'keys' || echo "Environment file created successfully"

          if aws lambda get-function --function-name $FUNCTION_NAME &>/dev/null; then
            echo "Updating existing function..."

            # Wait for function to be in Active state before updating
            echo "Waiting for function to be ready for updates..."
            aws lambda wait function-active --function-name $FUNCTION_NAME

            # Update function code first
            aws lambda update-function-code \
              --function-name $FUNCTION_NAME \
              --zip-file fileb://$ZIP_FILE

            # Wait for code update to complete
            aws lambda wait function-updated --function-name $FUNCTION_NAME

            aws lambda update-function-configuration \
              --function-name $FUNCTION_NAME \
              --environment file://env.json \
              --timeout 30 \
              --memory-size 2048 \
              --ephemeral-storage '{"Size": 2048}'

            # Wait for configuration update to complete
            aws lambda wait function-updated --function-name $FUNCTION_NAME
          else
            echo "Creating new function..."
            aws lambda create-function \
              --function-name $FUNCTION_NAME \
              --runtime $RUNTIME \
              --role $ROLE_ARN \
              --handler $HANDLER \
              --architectures $ARCHITECTURE \
              --zip-file fileb://$ZIP_FILE \
              --environment file://env.json \
              --timeout 30 \
              --memory-size 2048 \
              --ephemeral-storage '{"Size": 2048}'

            # Wait for function to be active
            aws lambda wait function-active --function-name $FUNCTION_NAME
          fi

          echo "Lambda function deployment completed successfully!"
        env:
          ENV_VARS: ${{ secrets.ENV_VARS || '{}' }}

      - name: Configure Lambda Logging Permissions
        run: |
          echo "Ensuring Lambda has CloudWatch logging permissions..."

          # Get the Lambda function's role name
          ROLE_NAME=$(aws lambda get-function --function-name $FUNCTION_NAME --query 'Configuration.Role' --output text | cut -d'/' -f2)
          echo "Lambda role: $ROLE_NAME"

          # Attach CloudWatch Logs policy if not already attached
          aws iam attach-role-policy \
            --role-name $ROLE_NAME \
            --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole 2>/dev/null || echo "Policy already attached"

          echo "Lambda logging permissions configured!"

      - name: Configure API Gateway
        run: |
          # Check if API already exists
          EXISTING_API_ID=$(aws apigatewayv2 get-apis --query "Items[?Name=='$API_NAME'].ApiId" --output text 2>/dev/null || echo "")

          if [ -n "$EXISTING_API_ID" ] && [ "$EXISTING_API_ID" != "None" ]; then
            echo "Using existing API Gateway: $EXISTING_API_ID"
            API_ID=$EXISTING_API_ID
          else
            echo "Creating new API Gateway..."
            API_ID=$(aws apigatewayv2 create-api \
              --name "$API_NAME" \
              --protocol-type HTTP \
              --query "ApiId" --output text)
            echo "Created API Gateway: $API_ID"
          fi

          # Get account ID for Lambda ARN
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          LAMBDA_ARN="arn:aws:lambda:$REGION:$ACCOUNT_ID:function:$FUNCTION_NAME"
          echo "Lambda ARN: $LAMBDA_ARN"

          # Check if integration already exists
          EXISTING_INTEGRATION_ID=$(aws apigatewayv2 get-integrations --api-id $API_ID --query "Items[0].IntegrationId" --output text 2>/dev/null || echo "")

          if [ -n "$EXISTING_INTEGRATION_ID" ] && [ "$EXISTING_INTEGRATION_ID" != "None" ]; then
            echo "Using existing integration: $EXISTING_INTEGRATION_ID"
            INTEGRATION_ID=$EXISTING_INTEGRATION_ID

            # Update existing integration to ensure it's correct
            echo "Updating existing integration..."
            aws apigatewayv2 update-integration \
              --api-id $API_ID \
              --integration-id $INTEGRATION_ID \
              --integration-uri $LAMBDA_ARN \
              --payload-format-version 2.0
          else
            echo "Creating new integration..."
            INTEGRATION_ID=$(aws apigatewayv2 create-integration \
              --api-id $API_ID \
              --integration-type AWS_PROXY \
              --integration-uri $LAMBDA_ARN \
              --payload-format-version 2.0 \
              --query 'IntegrationId' --output text)
            echo "Created integration: $INTEGRATION_ID"
          fi

          # Verify integration
          echo "Verifying integration configuration..."
          aws apigatewayv2 get-integration --api-id $API_ID --integration-id $INTEGRATION_ID

          # Create routes (these will be updated if they exist)
          echo "Setting up routes..."

          # Delete existing routes first to avoid conflicts
          echo "Cleaning up existing routes..."
          aws apigatewayv2 get-routes --api-id $API_ID --query "Items[?RouteKey=='ANY /'].RouteId" --output text | xargs -I {} aws apigatewayv2 delete-route --api-id $API_ID --route-id {} 2>/dev/null || echo "No existing ANY / route to delete"
          aws apigatewayv2 get-routes --api-id $API_ID --query "Items[?RouteKey=='ANY /{proxy+}'].RouteId" --output text | xargs -I {} aws apigatewayv2 delete-route --api-id $API_ID --route-id {} 2>/dev/null || echo "No existing ANY /{proxy+} route to delete"

          # Create new routes
          echo "Creating ANY / route..."
          aws apigatewayv2 create-route \
            --api-id $API_ID \
            --route-key "ANY /" \
            --target "integrations/$INTEGRATION_ID"

          echo "Creating ANY /{proxy+} route..."
          aws apigatewayv2 create-route \
            --api-id $API_ID \
            --route-key "ANY /{proxy+}" \
            --target "integrations/$INTEGRATION_ID"

          # Create or update stage
          echo "Setting up stage..."
          aws apigatewayv2 create-stage \
            --api-id $API_ID \
            --stage-name '$default' \
            --auto-deploy 2>/dev/null || echo "Stage $default already exists"

          # Set permissions (will fail silently if already exists)
          echo "Setting up Lambda permissions..."
          aws lambda add-permission \
            --function-name $FUNCTION_NAME \
            --statement-id "api-gateway-invoke" \
            --action lambda:InvokeFunction \
            --principal apigateway.amazonaws.com \
            --source-arn "arn:aws:execute-api:$REGION:$ACCOUNT_ID:$API_ID/*/*/*" 2>/dev/null || echo "Permission already exists"

          # Output endpoint (no stage in URL)
          ENDPOINT="https://$API_ID.execute-api.$REGION.amazonaws.com"
          echo "API_ENDPOINT=$ENDPOINT" >> $GITHUB_ENV
          echo "endpoint=$ENDPOINT" >> $GITHUB_OUTPUT
          echo "API Gateway configured successfully!"
          echo "Endpoint: $ENDPOINT"

          # Show final API Gateway configuration
          echo ""
          echo "📋 API Gateway Configuration Summary:"
          echo "API ID: $API_ID"
          echo "Integration ID: $INTEGRATION_ID"
          echo "Lambda ARN: $LAMBDA_ARN"
          echo "Stage: $default (root URL)"
          echo "Endpoint: $ENDPOINT"

      - name: Post deployment test
        run: |
          echo "Waiting 15 seconds for API Gateway to fully deploy..."
          sleep 15

          echo "Testing API endpoints..."

          # Test the root endpoint
          echo "Testing root endpoint..."
          ROOT_RESPONSE=$(curl -s $API_ENDPOINT --max-time 10)
          if [ $? -eq 0 ]; then
            echo "✅ Root endpoint response: $ROOT_RESPONSE"
            # Check if response contains expected message
            if echo "$ROOT_RESPONSE" | grep -q "Welcome to TravelStyle AI API"; then
              echo "✅ Root endpoint working correctly!"
            else
              echo "⚠️  Root endpoint returned unexpected response"
            fi
          else
            echo "❌ Root endpoint test failed"
          fi

          # Test the health endpoint
          echo "Testing health endpoint..."
          HEALTH_RESPONSE=$(curl -s $API_ENDPOINT/health --max-time 10)
          if [ $? -eq 0 ]; then
            echo "✅ Health endpoint response: $HEALTH_RESPONSE"
            # Check if response contains expected status
            if echo "$HEALTH_RESPONSE" | grep -q "healthy"; then
              echo "✅ Health endpoint working correctly!"
            else
              echo "⚠️  Health endpoint returned unexpected response"
            fi
          else
            echo "❌ Health endpoint test failed"
          fi

          echo ""
          echo "🎉 TravelStyle stage deployed successfully!"
          echo "🌐 Access your API at: $API_ENDPOINT"
          echo "🏥 Health check at: $API_ENDPOINT/health"
