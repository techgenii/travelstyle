name: Test CI Artifacts

on:
  workflow_dispatch:
  push:
    branches: [ test-ci ]
    paths:
      - 'backend/**'
      - '.github/workflows/test-ci.yml'

env:
  PYTHON_VERSION: '3.13'
  WORKING_DIR: backend

jobs:
  test-artifacts:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # Create test artifacts (simulating the quality-checks job)
      - name: Create test artifacts
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          mkdir -p reports
          # Create dummy test files
          echo "test results" > reports/pytest-results.xml
          echo "coverage data" > reports/pytest-coverage.txt
          echo "coverage json" > reports/pytest-coverage.json
          echo "ruff results" > reports/ruff_junit.xml
          echo '{"results": []}' > reports/bandit_report.json

      # Upload artifacts (like in quality-checks)
      - uses: actions/upload-artifact@v4
        with:
          name: quality-reports
          path: |
            ${{ env.WORKING_DIR }}/reports/ruff_junit.xml
            ${{ env.WORKING_DIR }}/reports/bandit_report.json
            ${{ env.WORKING_DIR }}/reports/pytest-results.xml
            ${{ env.WORKING_DIR }}/reports/pytest-coverage.json
            ${{ env.WORKING_DIR }}/reports/pytest-coverage.txt
          retention-days: 1

  test-coverage-update:
    runs-on: ubuntu-latest
    needs: [test-artifacts]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          path: artifacts/

      # Test the coverage comment step
      - name: Test Pytest coverage comment
        id: coverageComment
        uses: MishaKav/pytest-coverage-comment@main
        with:
          pytest-coverage-path: artifacts/quality-reports/pytest-coverage.txt
          title: Test Coverage Report
          junitxml-path: artifacts/quality-reports/pytest-results.xml
          junitxml-title: Test Unit Report

      # Show the output
      - name: Show coverage output
        run: |
          echo "Coverage HTML output:"
          echo "${{ steps.coverageComment.outputs.coverageHtml }}"
